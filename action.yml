name: Build CloudTruth CLI
description: 'Builds cloudtruth-cli from source'
inputs:
  buildOptions:
    description: Command-line options passed directly to `cargo build`
  testOptions:
    description: Command-line options passed directly to `cargo test`
  ref:
    description: Git ref to build from (defaults to the default branch)
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    default: '.'
  components:
    description: Rust toolchain components to install (ex rustfmt, clippy)
  profile:
    description: rust toolchain profile to use
    default: minimal
  override:
    description: Whether to use rustup default or rustup override (default to rustup default). Set to true for override behavior
  cross:
    description: Whether to use Cross or Cargo for builds (default to Cargo). Set to true for cross builds.
  cargoBinstall:
    description: If true, installs cargo binstall for faster installation of Cargo utilities
  target:
    description: Build targets to install with `rustup`. Note you will still need to pass in the `--target` build option with `buildOptions` if you want Cargo to build this target)
  skipUnitTests:
    description: Skips running unit tests
  skipCache:
    description: Skip caching of Cargo registry and dependencies
  skipBuild:
    description: Skip the build step. Useful if you just want to run linting or reports.
  cacheKey:
    description: A custom string to prefix cache keys with when caching build artifacts
    default: v0-cloudtruth-cli
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        repository: cloudtruth/cloudtruth-cli
        ref: ${{ inputs.ref }}
        path: ${{ inputs.path }}

    - name: Find rust-toolchain file
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if test -f rust-toolchain -o -f rust-toolchain.yml -o -f rust.toolchain.yaml; then
          echo 'Found rust-toolchain file'
        else
          echo 'No rust-toolchain file. Assuming legacy cloudtruth-cli'
          echo RUST_TOOLCHAIN=1.63.0 >> $GITHUB_ENV
        fi

    - name: Install Rust
      id: rust
      uses: cloudtruth/rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        working-directory: ${{ inputs.path }}
        profile: ${{ inputs.profile }}
        default: true
        components: ${{ inputs.components }}
        target: ${{ inputs.target }}

    - uses: Swatinem/rust-cache@v2
      if: ${{ !inputs.skipCache }}
      with:
        prefix-key: ${{ inputs.cacheKey }}
        shared-key: ${{ runner.os }}
        workspaces: ${{ inputs.path }} -> target

    - name: Install cargo-binstall
      if: inputs.cargoBinstall
      shell: bash
      run: |
        BASE_BINSTALL_URL='https://github.com/cargo-bins/cargo-binstall/releases/latest/download/'
        case ${{ runner.os }} in
            Linux)
              BINSTALL_FILE='cargo-binstall-x86_64-unknown-linux-musl.tgz'
              BINSTALL_URL="$BASE_BINSTALL_URL/$BINSTALL_FILE"
              curl -LSs "$BINSTALL_URL" | tar -C $HOME/.cargo/bin -xvz
            ;;
            macOS)
              BINSTALL_FILE='cargo-binstall-universal-apple-darwin.zip'
              BINSTALL_URL="$BASE_BINSTALL_URL/$BINSTALL_FILE"
              curl -LSs "$BINSTALL_URL" > "/tmp/$BINSTALL_FILE"
              unzip -o -d "$HOME/.cargo/bin" "/tmp/$BINSTALL_FILE"
            ;;
            Windows)
              BINSTALL_FILE='cargo-binstall-x86_64-pc-windows-msvc.zip'
              BINSTALL_URL="$BASE_BINSTALL_URL/$BINSTALL_FILE"
              curl -LSs "$BINSTALL_URL" > "/tmp/$BINSTALL_FILE"
              unzip -o -d "$HOME/.cargo/bin" "/tmp/$BINSTALL_FILE"
        esac;

    - run: cargo binstall --no-confirm cross
      if: ${{ inputs.cargoBinstall && inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - run: cargo install cross
      if: ${{ !inputs.cargoBinstall && inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - run: cargo build ${{ inputs.buildOptions }}
      if: ${{ !inputs.skipBuild && !inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - run: cargo build ${{ inputs.buildOptions }}
      if: ${{ !inputs.skipBuild && inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - run: cargo test ${{ inputs.testOptions }}
      if: ${{ !inputs.skipBuild && !inputs.skipUnitTests && !inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash
  
    - run: cross test ${{ inputs.testOptions }}
      if: ${{ !inputs.skipBuild && !inputs.skipUnitTests && inputs.cross }}
      working-directory: ${{ inputs.path }}
      shell: bash